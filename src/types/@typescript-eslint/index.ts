/**
 * THIS FILE IS AUTO-GENERATED.
 * DO NOT MODIFY IT MANUALLY.
 */

import type { AdjacentOverloadSignatures } from '../@typescript-eslint/adjacent-overload-signatures.js';
import type { ArrayType } from '../@typescript-eslint/array-type.js';
import type { AwaitThenable } from '../@typescript-eslint/await-thenable.js';
import type { BanTsComment } from '../@typescript-eslint/ban-ts-comment.js';
import type { BanTslintComment } from '../@typescript-eslint/ban-tslint-comment.js';
import type { BanTypes } from '../@typescript-eslint/ban-types.js';
import type { BlockSpacing } from '../@typescript-eslint/block-spacing.js';
import type { BraceStyle } from '../@typescript-eslint/brace-style.js';
import type { ClassLiteralPropertyStyle } from '../@typescript-eslint/class-literal-property-style.js';
import type { CommaDangle } from '../@typescript-eslint/comma-dangle.js';
import type { CommaSpacing } from '../@typescript-eslint/comma-spacing.js';
import type { ConsistentGenericConstructors } from '../@typescript-eslint/consistent-generic-constructors.js';
import type { ConsistentIndexedObjectStyle } from '../@typescript-eslint/consistent-indexed-object-style.js';
import type { ConsistentTypeAssertions } from '../@typescript-eslint/consistent-type-assertions.js';
import type { ConsistentTypeDefinitions } from '../@typescript-eslint/consistent-type-definitions.js';
import type { ConsistentTypeExports } from '../@typescript-eslint/consistent-type-exports.js';
import type { ConsistentTypeImports } from '../@typescript-eslint/consistent-type-imports.js';
import type { DefaultParamLast } from '../@typescript-eslint/default-param-last.js';
import type { DotNotation } from '../@typescript-eslint/dot-notation.js';
import type { ExplicitFunctionReturnType } from '../@typescript-eslint/explicit-function-return-type.js';
import type { ExplicitMemberAccessibility } from '../@typescript-eslint/explicit-member-accessibility.js';
import type { ExplicitModuleBoundaryTypes } from '../@typescript-eslint/explicit-module-boundary-types.js';
import type { FuncCallSpacing } from '../@typescript-eslint/func-call-spacing.js';
import type { Indent } from '../@typescript-eslint/indent.js';
import type { InitDeclarations } from '../@typescript-eslint/init-declarations.js';
import type { KeySpacing } from '../@typescript-eslint/key-spacing.js';
import type { KeywordSpacing } from '../@typescript-eslint/keyword-spacing.js';
import type { LinesAroundComment } from '../@typescript-eslint/lines-around-comment.js';
import type { LinesBetweenClassMembers } from '../@typescript-eslint/lines-between-class-members.js';
import type { MemberDelimiterStyle } from '../@typescript-eslint/member-delimiter-style.js';
import type { MemberOrdering } from '../@typescript-eslint/member-ordering.js';
import type { MethodSignatureStyle } from '../@typescript-eslint/method-signature-style.js';
import type { NamingConvention } from '../@typescript-eslint/naming-convention.js';
import type { NoArrayConstructor } from '../@typescript-eslint/no-array-constructor.js';
import type { NoBaseToString } from '../@typescript-eslint/no-base-to-string.js';
import type { NoConfusingNonNullAssertion } from '../@typescript-eslint/no-confusing-non-null-assertion.js';
import type { NoConfusingVoidExpression } from '../@typescript-eslint/no-confusing-void-expression.js';
import type { NoDupeClassMembers } from '../@typescript-eslint/no-dupe-class-members.js';
import type { NoDuplicateEnumValues } from '../@typescript-eslint/no-duplicate-enum-values.js';
import type { NoDuplicateTypeConstituents } from '../@typescript-eslint/no-duplicate-type-constituents.js';
import type { NoDynamicDelete } from '../@typescript-eslint/no-dynamic-delete.js';
import type { NoEmptyFunction } from '../@typescript-eslint/no-empty-function.js';
import type { NoEmptyInterface } from '../@typescript-eslint/no-empty-interface.js';
import type { NoExplicitAny } from '../@typescript-eslint/no-explicit-any.js';
import type { NoExtraNonNullAssertion } from '../@typescript-eslint/no-extra-non-null-assertion.js';
import type { NoExtraParens } from '../@typescript-eslint/no-extra-parens.js';
import type { NoExtraSemi } from '../@typescript-eslint/no-extra-semi.js';
import type { NoExtraneousClass } from '../@typescript-eslint/no-extraneous-class.js';
import type { NoFloatingPromises } from '../@typescript-eslint/no-floating-promises.js';
import type { NoForInArray } from '../@typescript-eslint/no-for-in-array.js';
import type { NoImpliedEval } from '../@typescript-eslint/no-implied-eval.js';
import type { NoImportTypeSideEffects } from '../@typescript-eslint/no-import-type-side-effects.js';
import type { NoInferrableTypes } from '../@typescript-eslint/no-inferrable-types.js';
import type { NoInvalidThis } from '../@typescript-eslint/no-invalid-this.js';
import type { NoInvalidVoidType } from '../@typescript-eslint/no-invalid-void-type.js';
import type { NoLoopFunc } from '../@typescript-eslint/no-loop-func.js';
import type { NoLossOfPrecision } from '../@typescript-eslint/no-loss-of-precision.js';
import type { NoMagicNumbers } from '../@typescript-eslint/no-magic-numbers.js';
import type { NoMeaninglessVoidOperator } from '../@typescript-eslint/no-meaningless-void-operator.js';
import type { NoMisusedNew } from '../@typescript-eslint/no-misused-new.js';
import type { NoMisusedPromises } from '../@typescript-eslint/no-misused-promises.js';
import type { NoMixedEnums } from '../@typescript-eslint/no-mixed-enums.js';
import type { NoNamespace } from '../@typescript-eslint/no-namespace.js';
import type { NoNonNullAssertedNullishCoalescing } from '../@typescript-eslint/no-non-null-asserted-nullish-coalescing.js';
import type { NoNonNullAssertedOptionalChain } from '../@typescript-eslint/no-non-null-asserted-optional-chain.js';
import type { NoNonNullAssertion } from '../@typescript-eslint/no-non-null-assertion.js';
import type { NoRedeclare } from '../@typescript-eslint/no-redeclare.js';
import type { NoRedundantTypeConstituents } from '../@typescript-eslint/no-redundant-type-constituents.js';
import type { NoRequireImports } from '../@typescript-eslint/no-require-imports.js';
import type { NoRestrictedImports } from '../@typescript-eslint/no-restricted-imports.js';
import type { NoShadow } from '../@typescript-eslint/no-shadow.js';
import type { NoThisAlias } from '../@typescript-eslint/no-this-alias.js';
import type { NoThrowLiteral } from '../@typescript-eslint/no-throw-literal.js';
import type { NoTypeAlias } from '../@typescript-eslint/no-type-alias.js';
import type { NoUnnecessaryBooleanLiteralCompare } from '../@typescript-eslint/no-unnecessary-boolean-literal-compare.js';
import type { NoUnnecessaryCondition } from '../@typescript-eslint/no-unnecessary-condition.js';
import type { NoUnnecessaryQualifier } from '../@typescript-eslint/no-unnecessary-qualifier.js';
import type { NoUnnecessaryTypeArguments } from '../@typescript-eslint/no-unnecessary-type-arguments.js';
import type { NoUnnecessaryTypeAssertion } from '../@typescript-eslint/no-unnecessary-type-assertion.js';
import type { NoUnnecessaryTypeConstraint } from '../@typescript-eslint/no-unnecessary-type-constraint.js';
import type { NoUnsafeArgument } from '../@typescript-eslint/no-unsafe-argument.js';
import type { NoUnsafeAssignment } from '../@typescript-eslint/no-unsafe-assignment.js';
import type { NoUnsafeCall } from '../@typescript-eslint/no-unsafe-call.js';
import type { NoUnsafeDeclarationMerging } from '../@typescript-eslint/no-unsafe-declaration-merging.js';
import type { NoUnsafeEnumComparison } from '../@typescript-eslint/no-unsafe-enum-comparison.js';
import type { NoUnsafeMemberAccess } from '../@typescript-eslint/no-unsafe-member-access.js';
import type { NoUnsafeReturn } from '../@typescript-eslint/no-unsafe-return.js';
import type { NoUnusedExpressions } from '../@typescript-eslint/no-unused-expressions.js';
import type { NoUnusedVars } from '../@typescript-eslint/no-unused-vars.js';
import type { NoUseBeforeDefine } from '../@typescript-eslint/no-use-before-define.js';
import type { NoUselessConstructor } from '../@typescript-eslint/no-useless-constructor.js';
import type { NoUselessEmptyExport } from '../@typescript-eslint/no-useless-empty-export.js';
import type { NoVarRequires } from '../@typescript-eslint/no-var-requires.js';
import type { NonNullableTypeAssertionStyle } from '../@typescript-eslint/non-nullable-type-assertion-style.js';
import type { ObjectCurlySpacing } from '../@typescript-eslint/object-curly-spacing.js';
import type { PaddingLineBetweenStatements } from '../@typescript-eslint/padding-line-between-statements.js';
import type { ParameterProperties } from '../@typescript-eslint/parameter-properties.js';
import type { PreferAsConst } from '../@typescript-eslint/prefer-as-const.js';
import type { PreferEnumInitializers } from '../@typescript-eslint/prefer-enum-initializers.js';
import type { PreferForOf } from '../@typescript-eslint/prefer-for-of.js';
import type { PreferFunctionType } from '../@typescript-eslint/prefer-function-type.js';
import type { PreferIncludes } from '../@typescript-eslint/prefer-includes.js';
import type { PreferLiteralEnumMember } from '../@typescript-eslint/prefer-literal-enum-member.js';
import type { PreferNamespaceKeyword } from '../@typescript-eslint/prefer-namespace-keyword.js';
import type { PreferNullishCoalescing } from '../@typescript-eslint/prefer-nullish-coalescing.js';
import type { PreferOptionalChain } from '../@typescript-eslint/prefer-optional-chain.js';
import type { PreferReadonly } from '../@typescript-eslint/prefer-readonly.js';
import type { PreferReadonlyParameterTypes } from '../@typescript-eslint/prefer-readonly-parameter-types.js';
import type { PreferReduceTypeParameter } from '../@typescript-eslint/prefer-reduce-type-parameter.js';
import type { PreferRegexpExec } from '../@typescript-eslint/prefer-regexp-exec.js';
import type { PreferReturnThisType } from '../@typescript-eslint/prefer-return-this-type.js';
import type { PreferStringStartsEndsWith } from '../@typescript-eslint/prefer-string-starts-ends-with.js';
import type { PreferTsExpectError } from '../@typescript-eslint/prefer-ts-expect-error.js';
import type { PromiseFunctionAsync } from '../@typescript-eslint/promise-function-async.js';
import type { Quotes } from '../@typescript-eslint/quotes.js';
import type { RequireArraySortCompare } from '../@typescript-eslint/require-array-sort-compare.js';
import type { RequireAwait } from '../@typescript-eslint/require-await.js';
import type { RestrictPlusOperands } from '../@typescript-eslint/restrict-plus-operands.js';
import type { RestrictTemplateExpressions } from '../@typescript-eslint/restrict-template-expressions.js';
import type { ReturnAwait } from '../@typescript-eslint/return-await.js';
import type { Semi } from '../@typescript-eslint/semi.js';
import type { SortTypeConstituents } from '../@typescript-eslint/sort-type-constituents.js';
import type { SpaceBeforeBlocks } from '../@typescript-eslint/space-before-blocks.js';
import type { SpaceBeforeFunctionParen } from '../@typescript-eslint/space-before-function-paren.js';
import type { SpaceInfixOps } from '../@typescript-eslint/space-infix-ops.js';
import type { StrictBooleanExpressions } from '../@typescript-eslint/strict-boolean-expressions.js';
import type { SwitchExhaustivenessCheck } from '../@typescript-eslint/switch-exhaustiveness-check.js';
import type { TripleSlashReference } from '../@typescript-eslint/triple-slash-reference.js';
import type { TypeAnnotationSpacing } from '../@typescript-eslint/type-annotation-spacing.js';
import type { Typedef } from '../@typescript-eslint/typedef.js';
import type { UnboundMethod } from '../@typescript-eslint/unbound-method.js';
import type { UnifiedSignatures } from '../@typescript-eslint/unified-signatures.js';

/** `@typescript-eslint/eslint-plugin` Rules */
export interface TypescriptEslint {
  '@typescript-eslint/adjacent-overload-signatures': AdjacentOverloadSignatures;
  '@typescript-eslint/array-type': ArrayType;
  '@typescript-eslint/await-thenable': AwaitThenable;
  '@typescript-eslint/ban-ts-comment': BanTsComment;
  '@typescript-eslint/ban-tslint-comment': BanTslintComment;
  '@typescript-eslint/ban-types': BanTypes;
  '@typescript-eslint/block-spacing': BlockSpacing;
  '@typescript-eslint/brace-style': BraceStyle;
  '@typescript-eslint/class-literal-property-style': ClassLiteralPropertyStyle;
  '@typescript-eslint/comma-dangle': CommaDangle;
  '@typescript-eslint/comma-spacing': CommaSpacing;
  '@typescript-eslint/consistent-generic-constructors': ConsistentGenericConstructors;
  '@typescript-eslint/consistent-indexed-object-style': ConsistentIndexedObjectStyle;
  '@typescript-eslint/consistent-type-assertions': ConsistentTypeAssertions;
  '@typescript-eslint/consistent-type-definitions': ConsistentTypeDefinitions;
  '@typescript-eslint/consistent-type-exports': ConsistentTypeExports;
  '@typescript-eslint/consistent-type-imports': ConsistentTypeImports;
  '@typescript-eslint/default-param-last': DefaultParamLast;
  '@typescript-eslint/dot-notation': DotNotation;
  '@typescript-eslint/explicit-function-return-type': ExplicitFunctionReturnType;
  '@typescript-eslint/explicit-member-accessibility': ExplicitMemberAccessibility;
  '@typescript-eslint/explicit-module-boundary-types': ExplicitModuleBoundaryTypes;
  '@typescript-eslint/func-call-spacing': FuncCallSpacing;
  '@typescript-eslint/indent': Indent;
  '@typescript-eslint/init-declarations': InitDeclarations;
  '@typescript-eslint/key-spacing': KeySpacing;
  '@typescript-eslint/keyword-spacing': KeywordSpacing;
  '@typescript-eslint/lines-around-comment': LinesAroundComment;
  '@typescript-eslint/lines-between-class-members': LinesBetweenClassMembers;
  '@typescript-eslint/member-delimiter-style': MemberDelimiterStyle;
  '@typescript-eslint/member-ordering': MemberOrdering;
  '@typescript-eslint/method-signature-style': MethodSignatureStyle;
  '@typescript-eslint/naming-convention': NamingConvention;
  '@typescript-eslint/no-array-constructor': NoArrayConstructor;
  '@typescript-eslint/no-base-to-string': NoBaseToString;
  '@typescript-eslint/no-confusing-non-null-assertion': NoConfusingNonNullAssertion;
  '@typescript-eslint/no-confusing-void-expression': NoConfusingVoidExpression;
  '@typescript-eslint/no-dupe-class-members': NoDupeClassMembers;
  '@typescript-eslint/no-duplicate-enum-values': NoDuplicateEnumValues;
  '@typescript-eslint/no-duplicate-type-constituents': NoDuplicateTypeConstituents;
  '@typescript-eslint/no-dynamic-delete': NoDynamicDelete;
  '@typescript-eslint/no-empty-function': NoEmptyFunction;
  '@typescript-eslint/no-empty-interface': NoEmptyInterface;
  '@typescript-eslint/no-explicit-any': NoExplicitAny;
  '@typescript-eslint/no-extra-non-null-assertion': NoExtraNonNullAssertion;
  '@typescript-eslint/no-extra-parens': NoExtraParens;
  '@typescript-eslint/no-extra-semi': NoExtraSemi;
  '@typescript-eslint/no-extraneous-class': NoExtraneousClass;
  '@typescript-eslint/no-floating-promises': NoFloatingPromises;
  '@typescript-eslint/no-for-in-array': NoForInArray;
  '@typescript-eslint/no-implied-eval': NoImpliedEval;
  '@typescript-eslint/no-import-type-side-effects': NoImportTypeSideEffects;
  '@typescript-eslint/no-inferrable-types': NoInferrableTypes;
  '@typescript-eslint/no-invalid-this': NoInvalidThis;
  '@typescript-eslint/no-invalid-void-type': NoInvalidVoidType;
  '@typescript-eslint/no-loop-func': NoLoopFunc;
  '@typescript-eslint/no-loss-of-precision': NoLossOfPrecision;
  '@typescript-eslint/no-magic-numbers': NoMagicNumbers;
  '@typescript-eslint/no-meaningless-void-operator': NoMeaninglessVoidOperator;
  '@typescript-eslint/no-misused-new': NoMisusedNew;
  '@typescript-eslint/no-misused-promises': NoMisusedPromises;
  '@typescript-eslint/no-mixed-enums': NoMixedEnums;
  '@typescript-eslint/no-namespace': NoNamespace;
  '@typescript-eslint/no-non-null-asserted-nullish-coalescing': NoNonNullAssertedNullishCoalescing;
  '@typescript-eslint/no-non-null-asserted-optional-chain': NoNonNullAssertedOptionalChain;
  '@typescript-eslint/no-non-null-assertion': NoNonNullAssertion;
  '@typescript-eslint/no-redeclare': NoRedeclare;
  '@typescript-eslint/no-redundant-type-constituents': NoRedundantTypeConstituents;
  '@typescript-eslint/no-require-imports': NoRequireImports;
  '@typescript-eslint/no-restricted-imports': NoRestrictedImports;
  '@typescript-eslint/no-shadow': NoShadow;
  '@typescript-eslint/no-this-alias': NoThisAlias;
  '@typescript-eslint/no-throw-literal': NoThrowLiteral;
  '@typescript-eslint/no-type-alias': NoTypeAlias;
  '@typescript-eslint/no-unnecessary-boolean-literal-compare': NoUnnecessaryBooleanLiteralCompare;
  '@typescript-eslint/no-unnecessary-condition': NoUnnecessaryCondition;
  '@typescript-eslint/no-unnecessary-qualifier': NoUnnecessaryQualifier;
  '@typescript-eslint/no-unnecessary-type-arguments': NoUnnecessaryTypeArguments;
  '@typescript-eslint/no-unnecessary-type-assertion': NoUnnecessaryTypeAssertion;
  '@typescript-eslint/no-unnecessary-type-constraint': NoUnnecessaryTypeConstraint;
  '@typescript-eslint/no-unsafe-argument': NoUnsafeArgument;
  '@typescript-eslint/no-unsafe-assignment': NoUnsafeAssignment;
  '@typescript-eslint/no-unsafe-call': NoUnsafeCall;
  '@typescript-eslint/no-unsafe-declaration-merging': NoUnsafeDeclarationMerging;
  '@typescript-eslint/no-unsafe-enum-comparison': NoUnsafeEnumComparison;
  '@typescript-eslint/no-unsafe-member-access': NoUnsafeMemberAccess;
  '@typescript-eslint/no-unsafe-return': NoUnsafeReturn;
  '@typescript-eslint/no-unused-expressions': NoUnusedExpressions;
  '@typescript-eslint/no-unused-vars': NoUnusedVars;
  '@typescript-eslint/no-use-before-define': NoUseBeforeDefine;
  '@typescript-eslint/no-useless-constructor': NoUselessConstructor;
  '@typescript-eslint/no-useless-empty-export': NoUselessEmptyExport;
  '@typescript-eslint/no-var-requires': NoVarRequires;
  '@typescript-eslint/non-nullable-type-assertion-style': NonNullableTypeAssertionStyle;
  '@typescript-eslint/object-curly-spacing': ObjectCurlySpacing;
  '@typescript-eslint/padding-line-between-statements': PaddingLineBetweenStatements;
  '@typescript-eslint/parameter-properties': ParameterProperties;
  '@typescript-eslint/prefer-as-const': PreferAsConst;
  '@typescript-eslint/prefer-enum-initializers': PreferEnumInitializers;
  '@typescript-eslint/prefer-for-of': PreferForOf;
  '@typescript-eslint/prefer-function-type': PreferFunctionType;
  '@typescript-eslint/prefer-includes': PreferIncludes;
  '@typescript-eslint/prefer-literal-enum-member': PreferLiteralEnumMember;
  '@typescript-eslint/prefer-namespace-keyword': PreferNamespaceKeyword;
  '@typescript-eslint/prefer-nullish-coalescing': PreferNullishCoalescing;
  '@typescript-eslint/prefer-optional-chain': PreferOptionalChain;
  '@typescript-eslint/prefer-readonly': PreferReadonly;
  '@typescript-eslint/prefer-readonly-parameter-types': PreferReadonlyParameterTypes;
  '@typescript-eslint/prefer-reduce-type-parameter': PreferReduceTypeParameter;
  '@typescript-eslint/prefer-regexp-exec': PreferRegexpExec;
  '@typescript-eslint/prefer-return-this-type': PreferReturnThisType;
  '@typescript-eslint/prefer-string-starts-ends-with': PreferStringStartsEndsWith;
  '@typescript-eslint/prefer-ts-expect-error': PreferTsExpectError;
  '@typescript-eslint/promise-function-async': PromiseFunctionAsync;
  '@typescript-eslint/quotes': Quotes;
  '@typescript-eslint/require-array-sort-compare': RequireArraySortCompare;
  '@typescript-eslint/require-await': RequireAwait;
  '@typescript-eslint/restrict-plus-operands': RestrictPlusOperands;
  '@typescript-eslint/restrict-template-expressions': RestrictTemplateExpressions;
  '@typescript-eslint/return-await': ReturnAwait;
  '@typescript-eslint/semi': Semi;
  '@typescript-eslint/sort-type-constituents': SortTypeConstituents;
  '@typescript-eslint/space-before-blocks': SpaceBeforeBlocks;
  '@typescript-eslint/space-before-function-paren': SpaceBeforeFunctionParen;
  '@typescript-eslint/space-infix-ops': SpaceInfixOps;
  '@typescript-eslint/strict-boolean-expressions': StrictBooleanExpressions;
  '@typescript-eslint/switch-exhaustiveness-check': SwitchExhaustivenessCheck;
  '@typescript-eslint/triple-slash-reference': TripleSlashReference;
  '@typescript-eslint/type-annotation-spacing': TypeAnnotationSpacing;
  '@typescript-eslint/typedef': Typedef;
  '@typescript-eslint/unbound-method': UnboundMethod;
  '@typescript-eslint/unified-signatures': UnifiedSignatures;
}
